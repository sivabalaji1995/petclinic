# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven latest

on:
  # push:
  #   branches: [ main ]
  # pull_request:
  #   branches: [ main ]
  workflow_dispatch:
    # inputs: 
    #   stages:
    #     description: 'Select the stages to run'
    #     required: true
    #     default: all
    #     type: choice
    #     options:
    #       - build
    #       - Docker
  #   #       - all
  # push:
  #   branches:
  #     - main

permissions:
      contents: read
      id-token: write

jobs:
  build:
    # if : ${{github.event.inputs.stages == 'build' || github.event.inputs.stages == 'all'}}

    runs-on: ubuntu-latest
    strategy:
      matrix:
        java: [ '17' ]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name : checking the current folder
        run: pwd && ls -l

      # - name: Set up Java
      #   uses: actions/setup-java@v3
      #   with:
      #     distribution: temurin
      #     java-version: '17'

      - name: Set up JDK ${{matrix.java}}
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: temurin
          cache: maven

      - name: installing maven
        run: |
            sudo apt-get update
            sudo apt-get install -y maven
            mvn --version 
      - name: build the project
        run: |
            mvn -B package --file ./spring-petclinic/pom.xml

      - name: view the test file
        run: |
            ls -l ./spring-petclinic/target/
            ls -l ./spring-petclinic/target/surefire-reports/
            cat ./spring-petclinic/target/surefire-reports/*.txt
    

      - name: Cache Sonar packages
        uses: actions/cache@v3
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          cd spring-petclinic
           mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=petclinic -Dsonar.projectName='petclinic'

      - name: Wait for SonarQube Quality Gate result
        run: |
          echo "Waiting for analysis to complete..."
          sleep 10

          analysis_id=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/project_analyses/search?project=petclinic" | \
            jq -r '.analyses[0].key')

          echo "Analysis ID: $analysis_id"

          status=$(curl -s -u "${{ secrets.SONAR_TOKEN }}:" \
            "${{ secrets.SONAR_HOST_URL }}/api/qualitygates/project_status?projectKey=petclinic" | \
            jq -r '.projectStatus.status')

          echo "Quality Gate Status: $status"

          if [[ "$status" != "OK" ]]; then
            echo "Quality Gate failed. Failing the pipeline."
            exit 1
          else
            echo "Quality Gate passed."
          fi


      - name: publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: app-jar
          path: ./spring-petclinic/target/*.jar

  # sonar:
  #   # if : ${{github.event.inputs.stages == 'sonar' || github.event.inputs.stages == 'all'}}
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         ref: main

  #     - name: Set up Java
  #       uses: actions/setup-java@v3
  #       with:
  #         distribution: temurin
  #         java-version: '17'

  #     - name: Cache Sonar packages
  #       uses: actions/cache@v3
  #       with:
  #         path: ~/.sonar/cache
  #         key: ${{ runner.os }}-sonar
  #         restore-keys: ${{ runner.os }}-sonar

  #     - name: Build and analyze
  #       env:
  #         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #         SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #       run: |
  #         cd spring-petclinic
  #          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=petclinic -Dsonar.projectName='petclinic'
 
  Docker: 
    # if : ${{github.event.inputs.stages == 'Docker' || github.event.inputs.stages == 'all'}}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main

      - name : download the artifact
        uses: actions/download-artifact@v4
        with:
          name: app-jar
          path: ./spring-petclinic/

      - name: Generate short Git SHA
        run: echo GITSHA=$(git rev-parse --short HEAD) >> $GITHUB_ENV

      - name: Print Git SHA
        run: |
          echo "Git SHA: ${{ env.GITSHA }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: "balaji36490"
          password: ${{ secrets.DOCKERHUB_PASS }}

      - name: Build Docker image
        run: |
          docker buildx build --platform linux/amd64 -t balaji36490/petclinic:${{ env.GITSHA }} ./spring-petclinic  --push


  deploy:
    # if : ${{github.event.inputs.stages == 'deploy' || github.event.inputs.stages == 'all'}}
    runs-on: ubuntu-latest
    needs: Docker
    steps:
      - name: azure login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}  
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure kubernets
        run: |
          az account show 
        

  

     